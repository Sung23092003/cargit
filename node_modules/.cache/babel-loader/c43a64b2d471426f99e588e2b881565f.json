{"ast":null,"code":"\"use strict\";\n\nexports.isWithinInterval = isWithinInterval;\n\nvar _index = require(\"./toDate.js\");\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\n\n\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [+(0, _index.toDate)(interval.start), +(0, _index.toDate)(interval.end)].sort((a, b) => a - b);\n  return time >= startTime && time <= endTime;\n}","map":{"version":3,"names":["exports","isWithinInterval","_index","require","date","interval","time","toDate","startTime","endTime","start","end","sort","a","b"],"sources":["D:/React-Car-Rental-Website-master/node_modules/date-fns/isWithinInterval.js"],"sourcesContent":["\"use strict\";\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [\n    +(0, _index.toDate)(interval.start),\n    +(0, _index.toDate)(interval.end),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,gBAAT,CAA0BG,IAA1B,EAAgCC,QAAhC,EAA0C;EACxC,MAAMC,IAAI,GAAG,CAAC,CAAC,GAAGJ,MAAM,CAACK,MAAX,EAAmBH,IAAnB,CAAd;EACA,MAAM,CAACI,SAAD,EAAYC,OAAZ,IAAuB,CAC3B,CAAC,CAAC,GAAGP,MAAM,CAACK,MAAX,EAAmBF,QAAQ,CAACK,KAA5B,CAD0B,EAE3B,CAAC,CAAC,GAAGR,MAAM,CAACK,MAAX,EAAmBF,QAAQ,CAACM,GAA5B,CAF0B,EAG3BC,IAH2B,CAGtB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHQ,CAA7B;EAKA,OAAOR,IAAI,IAAIE,SAAR,IAAqBF,IAAI,IAAIG,OAApC;AACD"},"metadata":{},"sourceType":"script"}