{"ast":null,"code":"\"use strict\";\n\nexports.MonthParser = void 0;\n\nvar _constants = require(\"../constants.js\");\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass MonthParser extends _Parser.Parser {\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"L\", \"w\", \"I\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = value => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);\n      // 01, 02, ..., 12\n\n      case \"MM\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n\n      case \"Mo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"month\"\n        }), valueCallback);\n      // Jan, Feb, ..., Dec\n\n      case \"MMM\":\n        return match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // J, F, ..., D\n\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // January, February, ..., December\n\n      case \"MMMM\":\n      default:\n        return match.month(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n}\n\nexports.MonthParser = MonthParser;","map":{"version":3,"names":["exports","MonthParser","_constants","require","_Parser","_utils","Parser","incompatibleTokens","priority","parse","dateString","token","match","valueCallback","value","mapValue","parseNumericPattern","numericPatterns","month","parseNDigits","ordinalNumber","unit","width","context","validate","_date","set","date","_flags","setMonth","setHours"],"sources":["D:/React-Car-Rental-Website-master/node_modules/date-fns/parse/_lib/parsers/MonthParser.js"],"sourcesContent":["\"use strict\";\nexports.MonthParser = void 0;\nvar _constants = require(\"../constants.js\");\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass MonthParser extends _Parser.Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNumericPattern)(\n            _constants.numericPatterns.month,\n            dateString,\n          ),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(2, dateString),\n          valueCallback,\n        );\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return (0, _utils.mapValue)(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\nexports.MonthParser = MonthParser;\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,WAAR,GAAsB,KAAK,CAA3B;;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMF,WAAN,SAA0BG,OAAO,CAACE,MAAlC,CAAyC;EACvCC,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,CAAH;EAgBlBC,QAAQ,GAAG,GAAH;;EAERC,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;IAC9B,MAAMC,aAAa,GAAIC,KAAD,IAAWA,KAAK,GAAG,CAAzC;;IAEA,QAAQH,KAAR;MACE;MACA,KAAK,GAAL;QACE,OAAO,CAAC,GAAGN,MAAM,CAACU,QAAX,EACL,CAAC,GAAGV,MAAM,CAACW,mBAAX,EACEd,UAAU,CAACe,eAAX,CAA2BC,KAD7B,EAEER,UAFF,CADK,EAKLG,aALK,CAAP;MAOF;;MACA,KAAK,IAAL;QACE,OAAO,CAAC,GAAGR,MAAM,CAACU,QAAX,EACL,CAAC,GAAGV,MAAM,CAACc,YAAX,EAAyB,CAAzB,EAA4BT,UAA5B,CADK,EAELG,aAFK,CAAP;MAIF;;MACA,KAAK,IAAL;QACE,OAAO,CAAC,GAAGR,MAAM,CAACU,QAAX,EACLH,KAAK,CAACQ,aAAN,CAAoBV,UAApB,EAAgC;UAC9BW,IAAI,EAAE;QADwB,CAAhC,CADK,EAILR,aAJK,CAAP;MAMF;;MACA,KAAK,KAAL;QACE,OACED,KAAK,CAACM,KAAN,CAAYR,UAAZ,EAAwB;UACtBY,KAAK,EAAE,aADe;UAEtBC,OAAO,EAAE;QAFa,CAAxB,KAIAX,KAAK,CAACM,KAAN,CAAYR,UAAZ,EAAwB;UAAEY,KAAK,EAAE,QAAT;UAAmBC,OAAO,EAAE;QAA5B,CAAxB,CALF;MAQF;;MACA,KAAK,OAAL;QACE,OAAOX,KAAK,CAACM,KAAN,CAAYR,UAAZ,EAAwB;UAC7BY,KAAK,EAAE,QADsB;UAE7BC,OAAO,EAAE;QAFoB,CAAxB,CAAP;MAIF;;MACA,KAAK,MAAL;MACA;QACE,OACEX,KAAK,CAACM,KAAN,CAAYR,UAAZ,EAAwB;UAAEY,KAAK,EAAE,MAAT;UAAiBC,OAAO,EAAE;QAA1B,CAAxB,KACAX,KAAK,CAACM,KAAN,CAAYR,UAAZ,EAAwB;UACtBY,KAAK,EAAE,aADe;UAEtBC,OAAO,EAAE;QAFa,CAAxB,CADA,IAKAX,KAAK,CAACM,KAAN,CAAYR,UAAZ,EAAwB;UAAEY,KAAK,EAAE,QAAT;UAAmBC,OAAO,EAAE;QAA5B,CAAxB,CANF;IA3CJ;EAoDD;;EAEDC,QAAQ,CAACC,KAAD,EAAQX,KAAR,EAAe;IACrB,OAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,EAA9B;EACD;;EAEDY,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAed,KAAf,EAAsB;IACvBa,IAAI,CAACE,QAAL,CAAcf,KAAd,EAAqB,CAArB;IACAa,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;IACA,OAAOH,IAAP;EACD;;AApFsC;;AAsFzC3B,OAAO,CAACC,WAAR,GAAsBA,WAAtB"},"metadata":{},"sourceType":"script"}