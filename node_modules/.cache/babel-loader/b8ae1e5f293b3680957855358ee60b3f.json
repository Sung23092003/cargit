{"ast":null,"code":"\"use strict\";\n\nexports.getISOWeek = getISOWeek;\n\nvar _index = require(\"./constants.js\");\n\nvar _index2 = require(\"./startOfISOWeek.js\");\n\nvar _index3 = require(\"./startOfISOWeekYear.js\");\n\nvar _index4 = require(\"./toDate.js\");\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\n\nfunction getISOWeek(date) {\n  const _date = (0, _index4.toDate)(date);\n\n  const diff = +(0, _index2.startOfISOWeek)(_date) - +(0, _index3.startOfISOWeekYear)(_date); // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}","map":{"version":3,"names":["exports","getISOWeek","_index","require","_index2","_index3","_index4","date","_date","toDate","diff","startOfISOWeek","startOfISOWeekYear","Math","round","millisecondsInWeek"],"sources":["D:/React-Car-Rental-Website-master/node_modules/date-fns/getISOWeek.js"],"sourcesContent":["\"use strict\";\nexports.getISOWeek = getISOWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./startOfISOWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date) {\n  const _date = (0, _index4.toDate)(date);\n  const diff =\n    +(0, _index2.startOfISOWeek)(_date) -\n    +(0, _index3.startOfISOWeekYear)(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqBA,UAArB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBM,IAApB,EAA0B;EACxB,MAAMC,KAAK,GAAG,CAAC,GAAGF,OAAO,CAACG,MAAZ,EAAoBF,IAApB,CAAd;;EACA,MAAMG,IAAI,GACR,CAAC,CAAC,GAAGN,OAAO,CAACO,cAAZ,EAA4BH,KAA5B,CAAD,GACA,CAAC,CAAC,GAAGH,OAAO,CAACO,kBAAZ,EAAgCJ,KAAhC,CAFH,CAFwB,CAMxB;EACA;EACA;;EACA,OAAOK,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAGR,MAAM,CAACa,kBAAzB,IAA+C,CAAtD;AACD"},"metadata":{},"sourceType":"script"}