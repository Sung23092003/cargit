{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarDays = differenceInCalendarDays;\n\nvar _index = require(\"./constants.js\");\n\nvar _index2 = require(\"./startOfDay.js\");\n\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\n\nfunction differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);\n  const startOfDayRight = (0, _index2.startOfDay)(dateRight);\n  const timestampLeft = +startOfDayLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);\n  const timestampRight = +startOfDayRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight); // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInDay);\n}","map":{"version":3,"names":["exports","differenceInCalendarDays","_index","require","_index2","_index3","dateLeft","dateRight","startOfDayLeft","startOfDay","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInDay"],"sources":["D:/React-Car-Rental-Website-master/node_modules/date-fns/differenceInCalendarDays.js"],"sourcesContent":["\"use strict\";\nexports.differenceInCalendarDays = differenceInCalendarDays;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfDay.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);\n  const startOfDayRight = (0, _index2.startOfDay)(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(\n    (timestampLeft - timestampRight) / _index.millisecondsInDay,\n  );\n}\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,wBAAR,GAAmCA,wBAAnC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCK,QAAlC,EAA4CC,SAA5C,EAAuD;EACrD,MAAMC,cAAc,GAAG,CAAC,GAAGJ,OAAO,CAACK,UAAZ,EAAwBH,QAAxB,CAAvB;EACA,MAAMI,eAAe,GAAG,CAAC,GAAGN,OAAO,CAACK,UAAZ,EAAwBF,SAAxB,CAAxB;EAEA,MAAMI,aAAa,GACjB,CAACH,cAAD,GACA,CAAC,GAAGH,OAAO,CAACO,+BAAZ,EAA6CJ,cAA7C,CAFF;EAGA,MAAMK,cAAc,GAClB,CAACH,eAAD,GACA,CAAC,GAAGL,OAAO,CAACO,+BAAZ,EAA6CF,eAA7C,CAFF,CAPqD,CAWrD;EACA;EACA;;EACA,OAAOI,IAAI,CAACC,KAAL,CACL,CAACJ,aAAa,GAAGE,cAAjB,IAAmCX,MAAM,CAACc,iBADrC,CAAP;AAGD"},"metadata":{},"sourceType":"script"}