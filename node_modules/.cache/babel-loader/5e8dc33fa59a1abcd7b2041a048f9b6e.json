{"ast":null,"code":"\"use strict\";\n\nexports.QuarterParser = void 0;\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass QuarterParser extends _Parser.Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\":\n        // 01, 02, 03, 04\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n\n      case \"Qo\":\n        return match.ordinalNumber(dateString, {\n          unit: \"quarter\"\n        });\n      // Q1, Q2, Q3, Q4\n\n      case \"QQQ\":\n        return match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case \"QQQQ\":\n      default:\n        return match.quarter(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n\nexports.QuarterParser = QuarterParser;","map":{"version":3,"names":["exports","QuarterParser","_Parser","require","_utils","Parser","priority","parse","dateString","token","match","parseNDigits","length","ordinalNumber","unit","quarter","width","context","validate","_date","value","set","date","_flags","setMonth","setHours","incompatibleTokens"],"sources":["D:/React-Car-Rental-Website-master/node_modules/date-fns/parse/_lib/parsers/QuarterParser.js"],"sourcesContent":["\"use strict\";\nexports.QuarterParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass QuarterParser extends _Parser.Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\nexports.QuarterParser = QuarterParser;\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,aAAR,GAAwB,KAAK,CAA7B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMF,aAAN,SAA4BC,OAAO,CAACG,MAApC,CAA2C;EACzCC,QAAQ,GAAG,GAAH;;EAERC,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;IAC9B,QAAQD,KAAR;MACE;MACA,KAAK,GAAL;MACA,KAAK,IAAL;QAAW;QACT,OAAO,CAAC,GAAGL,MAAM,CAACO,YAAX,EAAyBF,KAAK,CAACG,MAA/B,EAAuCJ,UAAvC,CAAP;MACF;;MACA,KAAK,IAAL;QACE,OAAOE,KAAK,CAACG,aAAN,CAAoBL,UAApB,EAAgC;UAAEM,IAAI,EAAE;QAAR,CAAhC,CAAP;MACF;;MACA,KAAK,KAAL;QACE,OACEJ,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;UACxBQ,KAAK,EAAE,aADiB;UAExBC,OAAO,EAAE;QAFe,CAA1B,KAIAP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;UACxBQ,KAAK,EAAE,QADiB;UAExBC,OAAO,EAAE;QAFe,CAA1B,CALF;MAWF;;MACA,KAAK,OAAL;QACE,OAAOP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;UAC/BQ,KAAK,EAAE,QADwB;UAE/BC,OAAO,EAAE;QAFsB,CAA1B,CAAP;MAIF;;MACA,KAAK,MAAL;MACA;QACE,OACEP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;UACxBQ,KAAK,EAAE,MADiB;UAExBC,OAAO,EAAE;QAFe,CAA1B,KAIAP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;UACxBQ,KAAK,EAAE,aADiB;UAExBC,OAAO,EAAE;QAFe,CAA1B,CAJA,IAQAP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;UACxBQ,KAAK,EAAE,QADiB;UAExBC,OAAO,EAAE;QAFe,CAA1B,CATF;IA9BJ;EA6CD;;EAEDC,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;IACrB,OAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA9B;EACD;;EAEDC,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeH,KAAf,EAAsB;IACvBE,IAAI,CAACE,QAAL,CAAc,CAACJ,KAAK,GAAG,CAAT,IAAc,CAA5B,EAA+B,CAA/B;IACAE,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;IACA,OAAOH,IAAP;EACD;;EAEDI,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,EAcnB,GAdmB,CAAH;AA7DuB;;AA8E3C1B,OAAO,CAACC,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}